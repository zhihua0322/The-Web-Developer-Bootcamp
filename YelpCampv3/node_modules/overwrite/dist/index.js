"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _copyDir = require("copy-dir");

var _copyDir2 = _interopRequireDefault(_copyDir);

var _lodash = require("lodash.isfunction");

var _lodash2 = _interopRequireDefault(_lodash);

var _rimraf = require("rimraf");

var _rimraf2 = _interopRequireDefault(_rimraf);

var _package = require("../package.json");

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = overwrite;


var MODULES_DIR = __filename.slice(0, __filename.lastIndexOf("node_modules") + "node_modules".length);

function overwrite(moduleName, files) {
  var moduleDir = getModuleDir(moduleName);
  var newModuleDir = getNewModuleDir(moduleName);

  _rimraf2.default.sync(newModuleDir);
  _copyDir2.default.sync(moduleDir, newModuleDir);

  Object.keys(files).forEach(function (filename) {
    var transform = files[filename];
    var contents = _fs2.default.readFileSync(_path2.default.resolve(moduleDir, filename), "utf8");
    var newContents = (0, _lodash2.default)(transform) ? transform(contents) : transform;
    _fs2.default.writeFileSync(_path2.default.resolve(newModuleDir, filename), newContents, "utf8");
  });

  return require(newModuleDir);
}

function getNewModuleDir(moduleName) {
  return _path2.default.resolve(MODULES_DIR, "." + _package2.default.name, moduleName);
}

function getModuleDir(moduleName) {
  try {
    var moduleDir = _path2.default.resolve(MODULES_DIR, moduleName);
    require.resolve(moduleDir);
    return moduleDir;
  } catch (err) {
    if (err.code !== "MODULE_NOT_FOUND") {
      throw err;
    }
  }

  try {
    var parentModulePath = module.parent.filename.slice(MODULES_DIR.length + _path2.default.sep.length);
    var parentModuleName = parentModulePath.slice(0, parentModulePath.indexOf(_path2.default.sep));
    var _moduleDir = _path2.default.resolve(MODULES_DIR, parentModuleName, "node_modules", moduleName);
    require.resolve(_moduleDir);
    return _moduleDir;
  } catch (err) {
    if (err.code !== "MODULE_NOT_FOUND") {
      throw err;
    }
  }

  throw new Error("Cannot find module \"" + moduleName + "\".");
}